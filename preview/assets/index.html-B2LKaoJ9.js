import{_ as l,c as a,a as n,f as e,b as o,d as s,e as r,r as d,o as f}from"./app-CwHRZmre.js";const u={},m={class:"hint-container tip"};function g(c,i){const t=d("RouteLink");return f(),a("div",null,[i[17]||(i[17]=n("h1",{id:"configuration-overview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#configuration-overview"},[n("span",null,"Configuration Overview")])],-1)),n("div",m,[i[7]||(i[7]=n("p",{class:"hint-container-title"},"Helm Chart Configurations",-1)),n("p",null,[i[1]||(i[1]=e("The document pages in this section cover ")),i[2]||(i[2]=n("em",null,"NoitfyBC",-1)),i[3]||(i[3]=e(" app level configurations only. If your ")),i[4]||(i[4]=n("em",null,"NotifyBC",-1)),i[5]||(i[5]=e(" is deployed to Kubernetes using Helm, you can also ")),o(t,{to:"/docs/getting-started/installation.html#customizations"},{default:s(()=>i[0]||(i[0]=[e("customize")])),_:1}),i[6]||(i[6]=e(" infrastructure level configurations."))])]),i[18]||(i[18]=r('<p>There are two types of configurations - static and dynamic. Static configurations are defined in files or environment variables, requiring restarting <em>NotifyBC</em> to take effect, whereas dynamic configurations are defined in databases and updates take effect immediately.</p><h2 id="static-configurations" tabindex="-1"><a class="header-anchor" href="#static-configurations"><span>Static Configurations</span></a></h2><p>Most static configurations are specified in file <em>/src/config.ts</em>. If you need to change, instead of updating <em>/src/config.ts</em> file, create local file <em>/src/config.local.js</em> or environment specific file <em>/src/config.&lt;env&gt;.js</em>, which is only included when environment variable <em>NODE_ENV</em> equals <em>&lt;env&gt;</em>. Besides <em>js</em>, <em>ts</em> and <em>json</em> file extensions are also supported. The rest of the documentation assumes the file extension is <em>js</em>. Content in these files are deeply merged in following ascending precedence</p><ul><li>default file /src/config.ts</li><li>environment specific file <em>/src/config.&lt;env&gt;.js</em></li><li>local file <em>/src/config.local.js</em></li></ul><div class="hint-container warning"><p class="hint-container-title">Run build script whenever changing file in /src</p><p>Every time a file under <em>/src</em>, including config files, is updated, run <code>npm run build</code> before restarting <em>NotifyBC</em> to take effect.</p></div><p>Following configs should be customized per installation</p>',6)),n("ul",null,[n("li",null,[o(t,{to:"/docs/config/adminIpList.html"},{default:s(()=>i[8]||(i[8]=[e("Admin IP List")])),_:1})]),n("li",null,[o(t,{to:"/docs/config/reverseProxyIpLists.html"},{default:s(()=>i[9]||(i[9]=[e("Reverse Proxy IP Lists")])),_:1})]),n("li",null,[o(t,{to:"/docs/config/httpHost.html"},{default:s(()=>i[10]||(i[10]=[e("HTTP Host")])),_:1})]),n("li",null,[o(t,{to:"/docs/config/email.html#smtp"},{default:s(()=>i[11]||(i[11]=[e("SMTP")])),_:1})])]),i[19]||(i[19]=n("p",null,"In addition, if installing from source code",-1)),n("ul",null,[n("li",null,[o(t,{to:"/docs/config/database.html"},{default:s(()=>i[12]||(i[12]=[e("Database")])),_:1})]),n("li",null,[o(t,{to:"/docs/config/internalHttpHost.html"},{default:s(()=>i[13]||(i[13]=[e("Internal HTTP Host")])),_:1})])]),i[20]||(i[20]=n("p",null,"Customizing other configs only if needed.",-1)),i[21]||(i[21]=n("h2",{id:"dynamic-configurations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dynamic-configurations"},[n("span",null,"Dynamic Configurations")])],-1)),n("p",null,[i[15]||(i[15]=e("Dynamic configs are managed using REST ")),o(t,{to:"/docs/api-config/"},{default:s(()=>i[14]||(i[14]=[e("configuration api")])),_:1}),i[16]||(i[16]=e("."))]),i[22]||(i[22]=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Why Dynamic Configs?"),n("p",null,"Dynamic configs are needed in cases such as"),n("ul",null,[n("li",null,"to allow define service-specific configs such as message templates"),n("li",null,"in a multi-node deployment, configs can be generated by one node (typically primary) and shared with other nodes")])],-1))])}const v=l(u,[["render",g],["__file","index.html.vue"]]),y=JSON.parse(`{"path":"/docs/config-overview/","title":"Configuration Overview","lang":"en-US","frontmatter":{"permalink":"/docs/config-overview/","prev":"/docs/what's-new/"},"headers":[{"level":2,"title":"Static Configurations","slug":"static-configurations","link":"#static-configurations","children":[]},{"level":2,"title":"Dynamic Configurations","slug":"dynamic-configurations","link":"#dynamic-configurations","children":[]}],"git":{},"filePathRelative":"docs/config/overview.md"}`);export{v as comp,y as data};
