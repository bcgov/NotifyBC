import{_ as o,c as l,a as e,f as n,b as a,d as i,e as r,r as p,o as u}from"./app-B8NtWqYC.js";const c={};function d(m,s){const t=p("RouteLink");return u(),l("div",null,[s[11]||(s[11]=e("h1",{id:"bulk-import",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bulk-import"},[e("span",null,"Bulk Import")])],-1)),s[12]||(s[12]=e("p",null,[n("To migrate subscriptions from other notification systems, you can use "),e("a",{href:"https://www.mongodb.com/docs/database-tools/mongoimport/",target:"_blank",rel:"noopener noreferrer"},"mongoimport"),n(". "),e("em",null,"NotifyBC"),n(" also provides a utility script to bulk import subscription data from a .csv file. To use the utility, you need")],-1)),e("ul",null,[s[10]||(s[10]=e("li",null,[n("Software installed "),e("ul",null,[e("li",null,"Node.js"),e("li",null,"Git")])],-1)),e("li",null,[s[1]||(s[1]=n("Admin Access to a ")),s[2]||(s[2]=e("em",null,"NotifyBC",-1)),s[3]||(s[3]=n(" instance by adding your client ip to the ")),a(t,{to:"/docs/config-adminIpList/"},{default:i(()=>s[0]||(s[0]=[n("Admin IP List")])),_:1})]),e("li",null,[s[5]||(s[5]=n("a csv file with header row matching ")),a(t,{to:"/docs/api-subscription/#model-schema"},{default:i(()=>s[4]||(s[4]=[n("subscription model schema")])),_:1}),s[6]||(s[6]=n(". A sample csv file is ")),s[7]||(s[7]=e("a",{href:"https://github.com/bcgov/NotifyBC/tree/main/src/utils/bulk-import/sample-subscription.csv",target:"_blank",rel:"noopener noreferrer"},"provided",-1)),s[8]||(s[8]=n(". Compound fields (of object type) should be dot-flattened as shown in the sample for field ")),s[9]||(s[9]=e("em",null,"confirmationRequest.sendRequest",-1))])]),s[13]||(s[13]=r(`<p>To run the utility</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/bcgov/NotifyBC.git</span>
<span class="line"><span class="token builtin class-name">cd</span> NotifyBC</span>
<span class="line"><span class="token function">npm</span> i <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run build</span>
<span class="line"><span class="token function">node</span> dist/utils/bulk-import/subscription.js <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>api-url-prefix<span class="token operator">&gt;</span> <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>concurrency<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>csv-file-path<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here &lt;csv-file-path&gt; is the path to csv file and &lt;api-url-prefix&gt; is the <em>NotifyBC</em> api url prefix , default to <em>http://localhost:3000/api</em>.</p><p>The script parses the csv file and generates a HTTP post request for each row. The concurrency of HTTP request is controlled by option <em>-c</em> which is default to 10 if omitted. A successful run should output the number of rows imported without any error message</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">success row count = ***</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="field-parsers" tabindex="-1"><a class="header-anchor" href="#field-parsers"><span>Field Parsers</span></a></h3><p>The utility script takes care of type conversion for built-in fields. If you need to import proprietary fields, by default the fields are imported as strings. To import non-string fields or manipulating json output, you need to define <a href="https://github.com/Keyang/node-csvtojson#custom-parsers" target="_blank" rel="noopener noreferrer">custom parsers</a> in file <a href="https://github.com/bcgov/NotifyBC/tree/main/src/utils/bulk-import/subscription.ts" target="_blank" rel="noopener noreferrer"><em>src/utils/bulk-import/subscription.ts</em></a>. For example, to parse <em>myCustomIntegerField</em> to integer, add in the <em>colParser</em> object</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token literal-property property">colParser</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">,</span> <span class="token function-variable function">myCustomIntegerField</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> head<span class="token punctuation">,</span> resultRow<span class="token punctuation">,</span> row<span class="token punctuation">,</span> colIdx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8))])}const b=o(c,[["render",d],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/docs/bulk-import/","title":"Bulk Import","lang":"en-US","frontmatter":{"permalink":"/docs/bulk-import/"},"headers":[{"level":3,"title":"Field Parsers","slug":"field-parsers","link":"#field-parsers","children":[]}],"git":{},"filePathRelative":"docs/miscellaneous/bulk-import.md"}');export{b as comp,k as data};
